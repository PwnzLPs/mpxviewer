/*****************************************************************************
 * cmdl.bt - Structure definitions for Metroid Prime - cmdl file related entities.
 *
 *****************************************************************************
 * Revision History:
 *  2009/09/19 - GWC - Original
 *  2009/11/30 - GWC - Updates for Metroid Prime 3
 */

#include "common-types.bt"

SetReadOnly(true);

// #pragma displayname("cmdl structures")
// #pragma fileextensions(".cmdl")

// #pragma byteorder(big_endian)
BigEndian();

// mark used bytes with a light green background
SetBackColor(cLtGreen);

// CMDL_FILE File Structure
struct CMDL_FILE
{
//	#pragma lockAt(0x00000000)

	// CMDL_FILE File Header Structure - 0x10 (16) bytes
	struct CMDL_HEADER
	{ 
		uint32 fileID <format = hex>;
		uint32 fileVersion; // MP1 = 2, MP2 = 4, MP3 = 5
		uint32 fileFormat; // seems to specify data format and layout of file - when 5 (MP3 = 1) normals are floats, when 6 (MP3 = 2) normals are signed short, when 0 normals are float and empty section is omitted
		float3 boundingBox[2];
		uint32 sectionCount <format = hex>;
		uint32 headerCount <format = hex>; // number of header sections
		uint32 sectionSizes[sectionCount] <format = hex>;
	} fileHeader;

	// move to next 32-byte boundary
	FSkip((0x20 - (FTell() % 0x20)) % 0x20);
	
	local uint32 sectionNum = 0;
	struct
	{
		for (sectionNum = 0; sectionNum < fileHeader.headerCount; ++sectionNum)
		{
			union
			{
				uint8 dataBytes[fileHeader.sectionSizes[sectionNum]];
				struct
				{
					if (fileHeader.fileVersion == 5)//Mp3
					{
						uint32 dataCount;
						struct
						{
							struct
							{
								uint32 dataSize;
                                union{
								uint8  dataBytes[dataSize];
                                 struct{
                                   uint32 u1;
                                   uint32 u2;
                                   uint32 u3;
                                   uint32 u4;
                                   uint32 u5;
                                   uint32 u6;
                                   uint32 u7;
                                   //uint8 scr[dataSize-28];
                                   local int sz=dataSize-28;
                                   struct{
									   while(sz > 0){
									      struct{
										   uint32 scriptCommand;
										   sz -=4;
										   if(scriptCommand==0x50415353)
										   {//PASS
											  uint32 passValue<format=hex>; 
											sz-=4;
										   }
										   if(scriptCommand==0x434c5220)
										   {//CLR
											 uint32 clrValue;
											  sz-=4;
											 if(clrValue==scriptCommand){
												 uint32 colorRGB<format=hex>;
											     sz-=4;
											  }else{
												uint64 texture<format=hex>;
												  
                                                uint64 filler;
												  sz-=16;
												}
											}
											if(scriptCommand==0x454e4420)
											{//END
												sz-=4;
										   
											}
										    if(scriptCommand==0x494e4341)
											{//INCA
												uint32 Unknown1;
												uint64 Texture<format=hex>;;
												uint64 Unknown2;
											    sz-=20;
											}
											if(scriptCommand==0x52464c44)
											{//RFLD
											    uint32 Unknown1;
											    uint64 Texture<format=hex>;
												uint32 Filler<format=hex>;
												uint32 Unknown2;
												uint16 Unknown3;
												uint16 Unknown4;
												uint32 Filler2;
												sz-=0x1C;
											
											}
											if(scriptCommand==0x52464c56)
											{//RFLV
											    uint32 Unknown1;
												uint64 Texture<format=hex>;;
												uint64 Unknown2;
											    sz-=20;
											}	
											if(scriptCommand==0x494e5420)
											{//RFLV
											    uint32 Value;
												uint32 filler;
											    sz-=8;
											}
                                            if(scriptCommand==0x58524159)
											{//XRAY
											    uint32 Unknown1;
											    uint64 Texture<format=hex>;
												uint32 Filler<format=hex>;
												uint32 Unknown2;
												uint16 Unknown3;
												uint16 Unknown4;
												uint32 Filler2;
												sz-=0x1C;
											
											}											
										  }type;
									   }
                                    }scripts;
                                 }cmdlScript;
                                }scrUn;
							} sectionData[dataCount] <optimize = false>;
						} sectionData;
					}
					else
					{
						uint32 textureCount;
						uint32 textureIDs[textureCount] <format = hex>; // ids for TXTR files
						uint32 groupCount;
						uint32 groupOffsets[groupCount] <format = hex>; // similar to index data section information later in the file, appears to be offset to next group from beginning of the current one

						local uint32 dataNum = 0;
						local int64 filePos = FTell();
						struct
						{
							for (dataNum = 0; dataNum < groupCount; ++dataNum)
							{
								struct
								{

								uint32 GroupHeader <format = hex>; // usually of the form 0x00011083, 0x00071083, 0x00031013 - 0x00??10?? - unknown purpose
								uint32 textureCount;
								uint32 textureIndices[textureCount]; // index into main header texture list
								uint32 unknown0;
								uint32 unknown1;
								if ((GroupHeader & 0x4000) != 0x0000)
								{
									uint32 unknown0a[2];
								}
								if ((GroupHeader & 0xD00) == 0xD00)
								{
									uint32 unknown1a;
								}
								// unsure, this is just a hack for now
								// need to determine if this is present under any other circumstances
								if ((GroupHeader & 0x08) != 0x00)
								{
									uint32 unknownCount0;
									uint32 unknownData0[unknownCount0];
								}
								uint32 unknown2[3];
								uint32 AttribCount1; // usually seems to match the texture count
								struct
								{
									struct
									{  /*
										uint32 unknown0x00 <format = hex>; // usually of the form 0x0007A14F - 0x000????F - unknown purpose
										uint32 unknown0x04 <format = hex>; // usually of the form 0x00021CE7 - 0x000?1CE7 - unknown purpose
										uint32 unknown0x08;
										uint32 unknown0x0C;
										uint32 unknown0x10 <format = hex>; // 0x00000004,  0x00000006,  0x000000FF*/
                                        uint32 unknown0x00 <format = hex>; // usually of the form 0x0007A14F - 0x000????F - unknown purpose
                                        uint16 BlendNumber <format = hex>; //Possibly _GXBlendMode
                                        uint16 unknown0x06;
                                        uint32 unknown0x08;
                                        uint32 unknown0x0C;
                                        //uint32 unknown0x10 ; // 0x00000004,  0x00000006,  0x000000FF
                                        uint16 padding;
                                        uint16 BlendType <format = hex>;//GXBlendFactor
									} mAttribData[AttribCount1];
									struct
									{
										uint8 AttribDesc[4]; // Attribute Description(has a pattern) 0x00000000, 0x00000101, 0x00000202, 0x00000303 - unknown purpose, some sort of indexing perhaps?
									} AttribDesc[AttribCount1];
								} mAttribData;//LIGHTING HATH BEEN FOUND :D
								uint32 glLightCount;// usually seems to match the texture count
								uint32 glLighting[glLightCount] <format = hex>; // usually of the form 0x001EBC40, 0x001EBC50, 0x001EBC60, 0x001E8040, 0x00004010 - unknownPurpose
								uint32 unknownSize0;
								if (0 < unknownSize0)
								{
									union
									{
										uint8 dataBytes0x00[unknownSize0];
										struct
										{
											uint32 unknown0x00[unknownSize0 >> 2];
										} unknownData0x00;
									} unknownData3;
								}
						
								} materialGroups;
								
								FSeek(filePos + groupOffsets[dataNum]);
							}
						} materialGroups;
					}
				} sectionData;
			} headerSections;
		}
	} headerSections;

	struct
	{
		for (sectionNum = sectionNum; sectionNum < fileHeader.sectionCount; ++sectionNum)
		{
			union
			{
				uint8 dataBytes[fileHeader.sectionSizes[sectionNum]];
				struct
				{
					switch (sectionNum - fileHeader.headerCount)
					{
					case 0:
						{
							float3 vertices[fileHeader.sectionSizes[sectionNum] / 0x0C];
						} break;
					case 1:
						{
							if ((fileHeader.fileVersion != 5 && fileHeader.fileFormat != 6) ||
								(fileHeader.fileVersion == 5 && fileHeader.fileFormat != 2))
							{
								float3 normals[fileHeader.sectionSizes[sectionNum] / 0x0C];
							}
							else
							{
								struct
								{
									int16 x, y, z;
								} normals[fileHeader.sectionSizes[sectionNum] / 0x06];
							}
						} break;
					case 2:
						{
							uint32 unknown0x00[fileHeader.sectionSizes[sectionNum] / 0x04];
						} break;
					case 3:
						{
							float2 textureCoords[fileHeader.sectionSizes[sectionNum] / 0x08];
						} break;
					case 4:
						{
							// usually empty (when header flag is not 0) - unsure yet whether this one is ever valid
							// when header flag is 0 this section appears to be missing completely
							if (fileHeader.fileVersion != 5 &&
								0 != fileHeader.fileFormat)
							{
								break;
							}
						}
					case 5:
						{
							if ((fileHeader.fileVersion != 5 && 0 != fileHeader.fileFormat) ||
								4 == (sectionNum - fileHeader.headerCount))
							{
								// seems to be size or offset information for the sections following this one,
								// seems to assume a 0 offset for the first data section as otherwise all these offsets are actually at the end of a section
								// used currently as an offset to the next section following the current one
								uint32 dataCount;
								uint32 sizeOffsets[dataCount] <format = hex>;
								break;
							}
						}
					default:
						{
							// 0x00
							float3 unknown0x00; // not sure yet
							uint32 groupID; // index into material group in header sections
							// 0x10
							uint16 unknown0x10; // usually 32768 - unknown prupose
							uint16 dataSize <format = hex>;
							uint32 unknown0x14[3];
							// 0x20
							float3 unknown0x20; // not sure yet
							uint32 unknown0x2C;
							// 0x30
							uint32 unknown0x30[4];
							// 0x40
							union
							{
								uint8 dataBytes[dataSize];
/*								struct
								{
									local int64 stopPos = FTell() + dataSize;
									while (false &&/* (0 != ReadUByte(FTell())) && (FTell() < stopPos))
									{
										struct
										{
											uint8 formatFlags;
											uint16 dataCount;
											struct
											{
												uint16 vertexIndex;
												uint16 normalIndex;
												// still need to figure out how to determine the number of indices present
												// my guess is that is is somewhere in the still unknown header section data
												uint16 uvIndex;
											} indices[dataCount];
										} indexData;
									}
								} indexData;
*/							} indexData;
						} break;
					}
				} sectionData;
			} dataSections;
		}
	} dataSections;
};

struct CMDL_FILE fileInfo;
