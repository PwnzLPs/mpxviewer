/*****************************************************************************
 * mrea.bt - Structure definitions for Metroid Prime - mrea file related entities.
 *
 *****************************************************************************
 * Revision History:
 *  2009/10/15 - GWC - Original
 */

#include "common-types.bt"

SetReadOnly(true);

// #pragma displayname("mrea structures")
// #pragma fileextensions(".mrea")

// #pragma byteorder(big_endian)
BigEndian();

// mark used bytes with a light green background
SetBackColor(cLtGreen);

// MREA_FILE File Structure
struct MREA_FILE
{
//	#pragma lockAt(0x00000000)

	// MREA_FILE File Header Structure - 0x10 (16) bytes
	struct MREA_HEADER
	{
		// 0x00
		uint32 fileID <format = hex>;
		uint32 fileVersion;
		float3x4 transformMatrix;
		uint32 meshCount;
		uint32 sectionCount;
		uint32 unknownCounts0x40[8];
		uint32 sectionSizes[sectionCount] <format = hex>;
	} fileHeader;

	// move to next 32-byte boundary
	FSkip((0x20 - (FTell() % 0x20)) % 0x20);

	local int64 fileOffset = FTell();
	local uint32 fileSection = 0;
	
	struct
	{
		uint32 textureCount;
		uint32 textureIDs[textureCount] <format = hex>; // ids for TXTR files
		uint32 groupCount;
		uint32 groupOffsets[groupCount] <format = hex>; // similar to index data section information later in the file, appears to be offset to next group from beginning of the current one

		local uint32 dataNum = 0;
		local int64 filePos = FTell();
		struct
		{
			for (dataNum = 0; dataNum < groupCount; ++dataNum)
			{
				struct
				{
					uint32 unknown0x00 <format = hex>; // usually of the form 0x00011083, 0x00071083, 0x00031013 - 0x00??10?? - unknown purpose
					uint32 textureCount;
					uint32 textureIndices[textureCount]; // index into main header texture list
					uint32 unknown0;
					uint32 unknown1;
					if ((unknown0x00 & 0xD00) == 0xD00)
					{
						uint32 unknown1a;
					}
					// unsure, this is just a hack for now
					// need to determine if this is present under any other circumstances
					if ((unknown0x00 & 0xF) == 0xB)
					{
						uint32 unknownCount0;
						uint32 unknownData0[unknownCount0];
					}
					uint32 unknown2[3];
					uint32 unknownCount1; // usually seems to match the texture count
					struct
					{
						struct
						{
							uint32 unknown0x00 <format = hex>; // usually of the form 0x0007A14F - 0x000????F - unknown purpose
							uint32 unknown0x04 <format = hex>; // usually of the form 0x00021CE7 - 0x000?1CE7 - unknown purpose
							uint32 unknown0x08;
							uint32 unknown0x0C;
							uint32 unknown0x10 <format = hex>; // 0x00000004,  0x00000006,  0x000000FF
						} unknownData0x00[unknownCount1];
						struct
						{
							uint8 unknown0x00[4]; // 0x00000000, 0x00000101, 0x00000202, 0x00000303 - unknown purpose, some sort of indexing perhaps?
						} unknownData0x14[unknownCount1];
					} unknownData1;
					uint32 unknownCount2; // usually seems to match the texture count
					uint32 unknownData2[unknownCount2] <format = hex>; // usually of the form 0x001EBC40, 0x001EBC50, 0x001EBC60, 0x001E8040, 0x00004010 - unknownPurpose
					uint32 unknownSize0;
					if (0 < unknownSize0)
					{
						union
						{
							uint8 dataBytes0x00[unknownSize0];
							struct
							{
								uint32 unknown0x00[unknownSize0 >> 2];
							} unknownData0x00;
						} unknownData3;
					}
				} materialGroups;
				
				FSeek(filePos + groupOffsets[dataNum]);
			}
		} materialGroups;
	} headerSection;

	FSeek(fileOffset + fileHeader.sectionSizes[fileSection]);
	fileOffset = FTell();
	++fileSection;
	
	struct
	{
		local uint32 meshNum = 0;
		for (meshNum = 0; meshNum < fileHeader.meshCount; ++meshNum)
		{
			struct
			{
				struct
				{
					// 0x00
					uint32 fileID <format = hex>;
					float3x4 transformMatrix;
					float2x3 boundingBox;
				} header;

				FSeek(fileOffset + fileHeader.sectionSizes[fileSection]);
				fileOffset = FTell();
				++fileSection;

				struct
				{
					// 0x00
					float3 vertices[fileHeader.sectionSizes[fileSection] / 0x0C];
				} vertices;

				FSeek(fileOffset + fileHeader.sectionSizes[fileSection]);
				fileOffset = FTell();
				++fileSection;

				struct
				{
					struct
					{
						// 0x00
						int16 normal[3];
					} normals[fileHeader.sectionSizes[fileSection] / 0x06];
				} normals;

				FSeek(fileOffset + fileHeader.sectionSizes[fileSection]);
				fileOffset = FTell();
				++fileSection;

				struct
				{
					// 0x00
					uint32 zeroData[fileHeader.sectionSizes[fileSection] / 0x04];
				} zeroData;

				FSeek(fileOffset + fileHeader.sectionSizes[fileSection]);
				fileOffset = FTell();
				++fileSection;

				struct
				{
					// 0x00
					float2 textureCoords[fileHeader.sectionSizes[fileSection] / 0x08];
				} textureCoords;

				FSeek(fileOffset + fileHeader.sectionSizes[fileSection]);
				fileOffset = FTell();
				++fileSection;

				struct
				{
					// 0x00
					uint32 unknownValues[fileHeader.sectionSizes[fileSection] / 0x04] <format = hex>;
				} unknownValues;

				FSeek(fileOffset + fileHeader.sectionSizes[fileSection]);
				fileOffset = FTell();
				++fileSection;

				// sub-mesh section offsets
				struct
				{
					uint32 subMeshCount;
					uint32 subMeshOffsets[subMeshCount] <format = hex>;
				} subMeshOffsets;

				FSeek(fileOffset + fileHeader.sectionSizes[fileSection]);
				fileOffset = FTell();
				++fileSection;
				
				struct
				{
					local uint32 subMeshNum = 0;
					for (subMeshNum = 0; subMeshNum < subMeshOffsets.subMeshCount; ++subMeshNum)
					{
						struct
						{
							// 0x00
							float3 unknown0x00; // not sure yet
							uint32 groupID; // index into material group in header sections
							// 0x10
							uint16 unknown0x10; // usually 32768 - unknown prupose
							uint16 dataSize <format = hex>;
							uint32 unknown0x14[2];
							uint32 unknownCount0x1C;
							// 0x20
							float3 unknown0x20; // not sure yet
							float2x3 boundingBox;
							// 0x30
							uint32 unknown0x30[7];
							// 0x60
							union
							{
								uint8 dataBytes[dataSize];
/*								struct
								{
									local int64 stopPos = FTell() + dataSize;
									while (false && (0 != ReadUByte(FTell())) && (FTell() < stopPos))
									{
										struct
										{
											uint8 formatFlags;
											uint16 dataCount;
											struct
											{
												uint16 vertexIndex;
												uint16 normalIndex;
												// still need to figure out how to determine the number of indices present
												// my guess is that is is somewhere in the still unknown header section data
												uint16 uvIndex;
											} indices[dataCount];
										} indexData;
									}
								} indexData;
*/							} indexData;
						} subMeshes;

						FSeek(fileOffset + fileHeader.sectionSizes[fileSection]);
						fileOffset = FTell();
						++fileSection;
					}
				} subMeshes;
			} meshData;
		}
	} meshData;
	
	//Printf("Final section number %d.\n", fileSection);
   //fileAROT segAROT;
 struct {
    uint32 fileID;
    uint32 fileVersion;
    uint32 fileFormat;
    uint32 meshCount;
    uint32 unknown2;
    float  boundingBox[6];
    uint32 unArray[5];
    float  max1;
    float  min1;
    float  max2;
    float  min2;
    uint32   data[(fileHeader.sectionSizes[fileSection]-80)/4];
  }fileAROT;
fileSection++;

 local int64 fileOffset2 = FTell()+(fileHeader.sectionSizes[fileSection]);
local  int64 fileOff=FTell();
local int64  secSize=0;
struct {

  union{
  
          uint32 unData[fileHeader.sectionSizes[fileSection]/4];
		  struct{
    char SCLY[4];
    uint32 dataVersion;
    uint32 dataID;
    uint32 ScriptSize;
    uint32 flags[dataID+1];
SetForeColor(cRed);
   
local int64  nData;
local int64  scriptnum=0;
secSize=16+((dataID+1)*4);
Printf("Section Size: %x\n",fileHeader.sectionSizes[fileSection]);
while( secSize<= fileHeader.sectionSizes[fileSection]){//while(FTell() < fileOffset2){
//if(scriptnum==115) FSeek(	0x2D2c0);		/// 
//(scriptnum==118) FSeek(	0x2D440);		///	 
//if(scriptnum==489)FSeek(	0x204948);
//if(scriptnum==762)FSeek( 0x20df7C);
//if(scriptnum==766)FSeek( 0x20e0b3);
//if(scriptnum==399)FSeek(0x122D40);
//FSeek(FTell() % 4 + FTell());
struct{
		 //uint32 unknown;
				  //  uint32 pad2;
local uint16 tst=0;
local uint32 base=FTell();
tst= ReadUShort(base);
FSeek(base);
		if(tst==0){
		scriptnum--;
		return;
		}else{                 
								uint16 size;
                                uint16 pad;
								union{
									    uint8 Data[size];
										struct{
										 uint16 unknown0 <format = hex>;
										 uint16 unknown1 <format = hex>;
										 uint8 unknown20 <format = hex>;
										 uint8 unknown2 <format = hex>;
										 uint16 unknown30 <format = hex>;
										  local int64 nsize=size;
										   if(unknown2!=0 && unknown2 != 0xA1){
												   nsize=size-(unknown2*0xC); 
												   local int64 i=0;
												  struct{
												   for(i=0;i<(unknown2);i++){
												   struct{
												   uint32 u1 <format = hex>;
												   uint32 u2 <format = hex>;
												   uint32 u3 <format = hex>;
												  }UnknownStruct;

												 }
											 }midData;
										   }
									    uint16 scriptType <format = hex>;
									    string Name;
										switch(scriptType){
										
                                        case 0xD:
                                        float3 translateValue;
                                        float3 orientation;
                                        float3 scale;
                                        float unk;
                                        float mass;
                                        float speed;
                                        float turnSpeed;
                                        float detectionRange;
                                        float detectionHeightRange;
                                        float detectionAngle;
                                        float minAttackRange;
                                        float maxAttackRange;
                                        float averageAttackTime;
                                        float attacktTimeVariation;
                                        float leashRadius;
                                        float playerLeashRadius;
                                        float playerLeashTime;

                                        struct
                                        {
                                            uint32 weaponType;
                                            float damage;
                                            float radius;
                                            float knockBackPower;
                                            int32 unk;
                                        }contactDamage;
                                        float damageWaitTime;
                                        struct
                                        {
                                            float health1;
                                            float health2;
                                            float knockBackPower;
                                        }healthData;
                                        uint32 vulCount;
                                        //if(nsize>0)uint8 data[nsize-Strlen(Name)-8-2-(sizeof(float)*19)];
                                        float vulnerabilities[vulCount];
                                        break;
										case 0x02:
										uint16 u1;
										uint16 u2;
										break;
										
										case 0x06://Timer
										uint32 u1<format=hex>;
										uint32 u2<format=hex>;
										uint16 timerType;
										uint16 countdown;
										 if(nsize>0)uint8 data[nsize-Strlen(Name)-8-2-12];
										break;
										
										 case 0x07:
										 uint16     unknownValue;
										 float3     TranslateValue;
                                         float3     scale;
                                         float3     rotation;
										break;
										//case 0x08:
										 
									
                                        case 0x09:
										 Printf("Found: %i\n", scriptnum);
										 if (Strstr(Name, "StreamedAudio") != -1)
										 {
											uint8 unk;
											string audioFiles;
											//float3     TranslateValue;
										  //-8 for the unknowns
										  //-2 for scripttype
										  //-strlen(Name)
										  //-1 for unk
										  //strlen(audioFiles)
									     // Size should be 0x15
										   local int nSize=size-8-2-Strlen(Name)-1-Strlen(audioFiles)-1;
											Printf("Size is: %x",nSize);
											uint8 data[nSize];
										 }
										 else
										 {
											 local int nSize=size-8-2-Strlen(Name)-(unknown2*0xC);//nSize-Strlen(Name);
											//float3     TranslateValue;
											 Printf("Size is: %x\n",nSize);
											uint8 data[nSize];
										 }
										break;
										case 0x0C: 
											  
												   switch(unknown2){
												
												case 5:
												float3      TranslateValue; 
											   // uint8        unknownarray[0x90];
											   // uint32       txtrs[3];

												local int nSize=size-8-2-Strlen(Name)-(unknown2*0xC)-12;   
												  Printf("size is: %x\n",nSize);
												if(nsize>0)uint8 data[nSize]; 
												break;
												case 1:
												   float4      glColor4f;//Alpha? 
												   float4      glColor4f;//Modulatation color? o.o XD   
												  if(nsize>0)uint8 data[nsize-Strlen(Name)-8-2-32]; 
												
												break;
												 default:
											 
												uint8 data[size-8-2-Strlen(Name)-(unknown2*0xC)];
												break;
											   }
											   
										break;
										case 0x0E:
										 float3     TranslateValue;
										 uint32     unknown1;
										 uint32     unknown2;
										 float      unknown3[4];
										 uint32     ANCSfile<format=hex>;
										 uint8         unknown4[0x57];
										 uint32     CMDLfile<format=hex>;
										 if(nsize>0)uint8 data[nsize-Strlen(Name)-8-2-0x28-0x57-4];
										
										break;
										case 0x14:
											Printf("0x14 num: %d \n",scriptnum);
											/*  float3  TranslateValues;
											  uint32  u1;
											  uint32  u2;
											  uint32  u3;
											  uint16  u4;*/
											 if(nsize>0)uint8 data[size-Strlen(Name)-8-2];
											break;
										
										case 0x18: //Actor
												float3 TranslateValue; 
												uint32 u1[2]; 
												float u2; 
												uint32 u3[3]; 
												uint32 partID <format = hex>; 
												uint32 u4[4]; 
												//uint16 u5[6]; 
												//uint8 u5; 
												if(nsize>0)uint8 data[nsize-Strlen(Name)-8-2-0x38]; 
												break;
										case 0x23://SPAWN POINT
										float3     TranslateValue;
										uint32  u1;
										uint32  u2;
										float u3;
										 if(nsize>0)uint8 data[nsize-Strlen(Name)-8-2-0x18];
										break;
										case 0x27:
										   float3     TranslateValue;
										   uint8      u1[0x80];
										   uint32     CMDLfile<format=hex>;

										   if(nsize>0)uint8 data[nsize-Strlen(Name)-8-2-12-0x80-4];
										break;
					
										case 0x08:
										default:
									   Printf("blah:%x\n",nsize-Strlen(Name)-8-2);
										local int nsize1=size-8-2-Strlen(Name)-(unknown2*0xC);;

											 if(0<size-8-2-Strlen(Name)-(unknown2*0xC))
											   uint8 data[size-8-2-Strlen(Name)-(unknown2*0xC)];
											
									 
										 break;
										}







						
							   }script;

								
								}uScript;
		}

				
                     secSize=secSize+4+size;
                  
					}script;

	        	scriptnum++;
			
           
			}
			}scriptt;
			}Scripts;

     
       Printf("Total Size: %d\n",secSize);
    }Script_Layer;

   fileSection++;
};


struct MREA_FILE fileInfo;