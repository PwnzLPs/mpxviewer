/*****************************************************************************
 * common-types.bt - Common type definition used in binary formats.
 *
 *****************************************************************************
 * Revision History:
 *  2009/03/16 - GWC - Original
 *  2009/03/18 - GWC - Added type parsing functions
 */

typedef byte int8;
typedef ubyte uint8;

typedef union
{
	float v[2];
	struct
	{
		float x, y;
	} vec2;
} float2 <read=float2Read, write=float2Write>;

typedef union
{
	float v[3];
	struct
	{
		float x, y, z;
	} vec3;
} float3 <read=float3Read, write=float3Write>;

typedef union
{
	float v[4];
	struct
	{
		float x, y, z, w;
	} vec4;
} float4 <read=float4Read, write=float4Write>;

typedef struct
{
	union
	{
		float v[4];
		float2 rows[2];
	} vec2x2;
} float2x2;

typedef struct
{
	union
	{
		float v[6];
		float3 rows[2];
	} vec2x3;
} float2x3;

typedef struct
{
	union
	{
		float v[9];
		float3 rows[3];
	} vec3x3;
} float3x3;

typedef struct
{
	union
	{
		float v[12];
		float3 rows[4];
	} vec4x3;
} float4x3;

typedef struct
{
	union
	{
		float v[8];
		float4 rows[2];
	} vec2x4;
} float2x4;

typedef struct
{
	union
	{
		float v[12];
		float4 rows[3];
	} vec3x4;
} float3x4;

typedef struct
{
	union
	{
		float v[16];
		float4 rows[4];
	} vec4x4;
} float4x4;


// float2 parsing functions
string float2Read( const float2 &v )
{
	string s;   
	SPrintf( s, "(%14f, %14f)", v.v[0], v.v[1] );
	return s;
}

void float2Write( float2 &v, string s )
{
	SScanf( s, "(%f, %f)", v.v[0], v.v[1] );
}

// float3 parsing functions
string float3Read( const float3 &v )
{
	string s;   
	SPrintf( s, "(%14f, %14f, %14f)", v.v[0], v.v[1], v.v[2] );
	return s;
}

void float3Write( float3 &v, string s )
{
	SScanf( s, "(%f, %f, %f)", v.v[0], v.v[1], v.v[2] );
}

// float4 parsing functions
string float4Read( const float4 &v )
{
	string s;   
	SPrintf( s, "(%14f, %14f, %14f, %14f)", v.v[0], v.v[1], v.v[2], v.v[3] );
	return s;
}

void float4Write( float4 &v, string s )
{
	SScanf( s, "(%f, %f, %f, %f)", v.v[0], v.v[1], v.v[2], v.v[3] );
}
